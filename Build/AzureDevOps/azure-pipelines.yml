# .NET Desktop
# Build and run tests for .NET Desktop or Windows classic desktop solutions.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/apps/windows/dot-net

jobs:
  - job: Windows

    pool:
      vmImage: 'VS2017-Win2016'

    strategy:
      matrix:
        Win32-Release:
          buildPlatform: Win32
          buildConfiguration: Release
        Win32-Debug:
          buildPlatform: Win32
          buildConfiguration: Debug
        x64-Release:
          buildPlatform: x64
          buildConfiguration: Release
        x64-Debug:
          buildPlatform: x64
          buildConfiguration: Debug
        ARM-Release:
          buildPlatform: ARM
          buildConfiguration: Release
        ARM-Debug:
          buildPlatform: ARM
          buildConfiguration: Debug
        ARM64-Release:
          buildPlatform: ARM64
          buildConfiguration: Release
        ARM64-Debug:
          buildPlatform: ARM64
          buildConfiguration: Debug

    steps:

    - task: CMake@1
      inputs:
        workingDirectory: 'built\Int\cmake_$(buildPlatform)'
        cmakeArgs: '..\..\.. -G "Visual Studio 15 2017" -A "$(buildPlatform)"'

    - task: CMake@1
      inputs:
        workingDirectory: 'built\Int\cmake_$(buildPlatform)'
        cmakeArgs: '--build . --target install --config $(buildConfiguration) -- /m'

    - script: .\GLTFSDK.Test.exe --gtest_output=xml:GLTFSDK.Test.log
      workingDirectory: built\Out\windows_$(buildPlatform)\$(buildConfiguration)\GLTFSDK.Test
      displayName: Running Unit Tests
      condition: and(succeeded(), in(variables['buildPlatform'], 'Win32', 'x64'))

    - task: PublishTestResults@2
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: built\Out\windows_$(buildPlatform)\$(buildConfiguration)\GLTFSDK.Test\GLTFSDK.Test.log
      condition: and(succeeded(), in(variables['buildPlatform'], 'Win32', 'x64'))

  - job: MacOS

    pool:
      vmImage: 'macOS-10.13'

    variables:
      buildPlatform: 'macOS'
      buildConfiguration: 'Release'

    steps:

    - task: CMake@1
      inputs:
        workingDirectory: 'built/Int/cmake_$(buildPlatform)'
        cmakeArgs: '../../.. -G Xcode'

    - task: CMake@1
      inputs:
        workingDirectory: 'built/Int/cmake_$(buildPlatform)'
        cmakeArgs: '--build . --target install --config $(buildConfiguration)'

    - script: ./GLTFSDK.Test --gtest_output=xml:GLTFSDK.Test.log
      workingDirectory: built/Out/$(buildPlatform)/$(buildConfiguration)/GLTFSDK.Test
      displayName: Running Unit Tests

    - task: PublishTestResults@2
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: built/Out/$(buildPlatform)/$(buildConfiguration)/GLTFSDK.Test/GLTFSDK.Test.log

  - job: iOS

    pool:
      vmImage: 'macOS-10.13'

    variables:
      buildPlatform: 'iOS'
      buildConfiguration: 'Release'

    steps:

    - task: CMake@1
      inputs:
        workingDirectory: 'built/Int/cmake_$(buildPlatform)'
        cmakeArgs: '../../.. -G Xcode -DCMAKE_TOOLCHAIN_FILE="$(Build.SourcesDirectory)/Build/CMake/ios.toolchain.cmake" -DIOS_PLATFORM=OS -DIOS_DEPLOYMENT_TARGET="9.0" -DENABLE_UNIT_TESTS="OFF"'

    - task: CMake@1
      inputs:
        workingDirectory: 'built/Int/cmake_$(buildPlatform)'
        cmakeArgs: '--build . --target install --config $(buildConfiguration)'

  - job: Android

    pool:
      vmImage: 'VS2017-Win2016'

     strategy:
      matrix:
        ARM32-Release:
          ABI: armeabi-v7a
          buildConfiguration: Release
        ARM32-Debug:
          ABI: armeabi-v7a
          buildConfiguration: Debug
        ARM64-Release:
          ABI: arm64-v8a
          buildConfiguration: Release
        ARM64-Debug:
          ABI: armeabi-v7a
          buildConfiguration: Debug
        x86_64-Release:
          ABI: x86_64
          buildConfiguration: Release
        x86_64-Debug:
          ABI: x86_64
          buildConfiguration: Debug
       
    variables:
      buildPlatform: 'android-19'

    steps:

    - task: CMake@1
      inputs:
        workingDirectory: 'built/Int/cmake_$(buildPlatform)'
        cmakeArgs: '../../.. -G "Visual Studio 15 2017" -DANDROID_ABI="$(ABI)" -DCMAKE_LIBRARY_OUTPUT_DIRECTORY=intermediates -DCMAKE_BUILD_TYPE="$(buildConfiguration)" 
				-DANDROID_NDK="C:\Program Files (x86)\Android\android-sdk\build-tools\28.0.0" -DCMAKE_TOOLCHAIN_FILE="$(Build.SourcesDirectory)/Build/CMake/android.toolchain.cmake" -DCMAKE_CXX_FLAGS=-fexceptions -DANDROID_STL=c++_static -GNinja -DANDROID_OS_PLATFORM=ANDROID -DENABLE_UNIT_TESTS="OFF"'

    - task: CMake@1
      inputs:
        workingDirectory: 'built/Int/cmake_$(buildPlatform)'
        cmakeArgs: '--build . --target install --config $(buildConfiguration)'

